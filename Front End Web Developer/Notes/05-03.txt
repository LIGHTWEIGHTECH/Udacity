// JavaScript's class system is built directly on using functions and objects. 
Calling (i.e., invoking) a constructor function with the new operator instantiates a new object. 
The same constructor function can be used to create different objects.


// Functions, objects, and this are all interconnected. 
When invoking constructor functions with the new operator, a this variable is set to the newly-created object. 
When invoking a method on an object, this is set to that object itself. 
And when invoking a function in a browser environment, this is set to window, otherwise known as the global object.


// JavaScript provides three methods that allow us to set the value of this for a given function:

* call() invokes the function and has arguments passed in individually, separated by commas.
* apply() is similar to call(); it invokes the function just the same, but arguments are passed in as an array.
* bind() returns a new function with this bound to a specific object, allowing us to call it as a regular function.


// Inheritance in JavaScript is when an object is based on another object. 
Inheritance allows us to reuse existing code, having objects take on properties of other objects.

When a function is called as a constructor using the new operator, the function creates and returns a new object. 
This object is secretly linked to its constructor's prototype, 
which is just another object. 
Using this secret link allows an object to access the prototype's properties and methods as if it were its own. 
If JavaScript does not find a particular property within an object, it will keep looking up the prototype chain, 
eventually reaching Object() (top-level parent) if necessary.

We also looked at a few methods and properties that allow use to check the origins and references of objects and their prototypes, namely:

* hasOwnProperty()
* isPrototypeOf()
* Object.getPrototypeOf()
* .constructor


// Inheritance in JavaScript is all about setting up the prototype chain. 
This allows us to subclass, that is, create a "child" object that inherits most or all of a "parent" object's properties and methods. 
We can then implement any of the child object's unique properties and methods separately, while still retaining data and functionality from its parent.

An object (instance) is secretly linked to its constructor function's prototype object through that instance's __proto__ property. 
You should never use the __proto__ property in any code you write. 
Using __proto__ in any code, or even inheriting just the prototype directly, leads to some unwanted side effects.

To efficiently manage inheritance in JavaScript, an effective approach is to avoid mutating the prototype completely. 
Object.create() allows us to do just that, 
taking in a parent object and returning a new object with its __proto__ property set to that parent object.